// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Bossdata
{

using global::System;
using global::FlatBuffers;

public struct Monster : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Monster GetRootAsMonster(ByteBuffer _bb) { return GetRootAsMonster(_bb, new Monster()); }
  public static Monster GetRootAsMonster(ByteBuffer _bb, Monster obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Monster __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Monsterstate { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Id { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(6); }
  public int Power { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Hp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Vec3? Monsterpos { get { int o = __p.__offset(12); return o != 0 ? (Vec3?)(new Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Monsterrot { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public MoveState Movestate { get { int o = __p.__offset(16); return o != 0 ? (MoveState)__p.bb.GetSbyte(o + __p.bb_pos) : MoveState.Move; } }
  public Vec3? Destinationpos { get { int o = __p.__offset(18); return o != 0 ? (Vec3?)(new Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public int Attacked { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Fire { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Currenthp { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Skillfire { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static void StartMonster(FlatBufferBuilder builder) { builder.StartObject(12); }
  public static void AddMonsterstate(FlatBufferBuilder builder, int monsterstate) { builder.AddInt(0, monsterstate, 0); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(1, idOffset.Value, 0); }
  public static void AddPower(FlatBufferBuilder builder, int power) { builder.AddInt(2, power, 0); }
  public static void AddHp(FlatBufferBuilder builder, int hp) { builder.AddInt(3, hp, 0); }
  public static void AddMonsterpos(FlatBufferBuilder builder, Offset<Vec3> monsterposOffset) { builder.AddStruct(4, monsterposOffset.Value, 0); }
  public static void AddMonsterrot(FlatBufferBuilder builder, float monsterrot) { builder.AddFloat(5, monsterrot, 0.0f); }
  public static void AddMovestate(FlatBufferBuilder builder, MoveState movestate) { builder.AddSbyte(6, (sbyte)movestate, 0); }
  public static void AddDestinationpos(FlatBufferBuilder builder, Offset<Vec3> destinationposOffset) { builder.AddStruct(7, destinationposOffset.Value, 0); }
  public static void AddAttacked(FlatBufferBuilder builder, int attacked) { builder.AddInt(8, attacked, 0); }
  public static void AddFire(FlatBufferBuilder builder, int fire) { builder.AddInt(9, fire, 0); }
  public static void AddCurrenthp(FlatBufferBuilder builder, int currenthp) { builder.AddInt(10, currenthp, 0); }
  public static void AddSkillfire(FlatBufferBuilder builder, int skillfire) { builder.AddInt(11, skillfire, 0); }
  public static Offset<Monster> EndMonster(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Monster>(o);
  }
};


}
