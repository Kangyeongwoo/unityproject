// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Bossdata
{

using global::System;
using global::FlatBuffers;

public struct Item : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Item GetRootAsItem(ByteBuffer _bb) { return GetRootAsItem(_bb, new Item()); }
  public static Item GetRootAsItem(ByteBuffer _bb, Item obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Item __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vec3? Itempos { get { int o = __p.__offset(4); return o != 0 ? (Vec3?)(new Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartItem(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddItempos(FlatBufferBuilder builder, Offset<Vec3> itemposOffset) { builder.AddStruct(0, itemposOffset.Value, 0); }
  public static Offset<Item> EndItem(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Item>(o);
  }
};


}
