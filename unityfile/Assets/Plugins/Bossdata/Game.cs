// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Bossdata
{

using global::System;
using global::FlatBuffers;

public struct Game : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Game GetRootAsGame(ByteBuffer _bb) { return GetRootAsGame(_bb, new Game()); }
  public static Game GetRootAsGame(ByteBuffer _bb, Game obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Game __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Tablenum { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Player? Player { get { int o = __p.__offset(6); return o != 0 ? (Player?)(new Player()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Item? Item { get { int o = __p.__offset(8); return o != 0 ? (Item?)(new Item()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Monster? Monster(int j) { int o = __p.__offset(10); return o != 0 ? (Monster?)(new Monster()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MonsterLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Game> CreateGame(FlatBufferBuilder builder,
      int tablenum = 0,
      Offset<Player> playerOffset = default(Offset<Player>),
      Offset<Item> itemOffset = default(Offset<Item>),
      VectorOffset monsterOffset = default(VectorOffset)) {
    builder.StartObject(4);
    Game.AddMonster(builder, monsterOffset);
    Game.AddItem(builder, itemOffset);
    Game.AddPlayer(builder, playerOffset);
    Game.AddTablenum(builder, tablenum);
    return Game.EndGame(builder);
  }

  public static void StartGame(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddTablenum(FlatBufferBuilder builder, int tablenum) { builder.AddInt(0, tablenum, 0); }
  public static void AddPlayer(FlatBufferBuilder builder, Offset<Player> playerOffset) { builder.AddOffset(1, playerOffset.Value, 0); }
  public static void AddItem(FlatBufferBuilder builder, Offset<Item> itemOffset) { builder.AddOffset(2, itemOffset.Value, 0); }
  public static void AddMonster(FlatBufferBuilder builder, VectorOffset monsterOffset) { builder.AddOffset(3, monsterOffset.Value, 0); }
  public static VectorOffset CreateMonsterVector(FlatBufferBuilder builder, Offset<Monster>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMonsterVectorBlock(FlatBufferBuilder builder, Offset<Monster>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMonsterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Game> EndGame(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Game>(o);
  }
  public static void FinishGameBuffer(FlatBufferBuilder builder, Offset<Game> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedGameBuffer(FlatBufferBuilder builder, Offset<Game> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
